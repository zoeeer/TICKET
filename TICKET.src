#--------------------------------------------------------------------------
# SPA Name:		Ticket
# Description:		A Simplified Railway Ticket System
#
#--------------------------------------------------------------------------
# Client FSM(s):
#			REGISTER
#			LOGIN
#			LOGOUT
#			RECHARGE
#--------------------------------------------------------------------------
# History:
#			2015-03-18  rangt	Created
#--------------------------------------------------------------------------

version "TICKET15F"

# Distributed and performance test enhancement
options (distributed,dg_cache=false,spa_timer_limit=200000,keep_on_lead=true)

########################################################################
########		   Common Definition			########
########################################################################
type
	Result_Code				enum {
		SUCCESS,
		FAIL,
	}

	Order_State_enum			enum {
		PENDING,
		PAID,
		EXPIRED,
	}

	Parse_Result_rec			record {
		head			string,
		tail			string,
	}

	# Ticket info
	Train_Info_rec				record {
		Train_Number		string(4),
		Start_Station		string(30),
		Destination		string(30),
		Departure_Time		string(4),	# hhmm
		Arrival_Time		string(4),	# hhmm
		Duration		string(5),	# hhhmm
		Price			counter,
		Total			counter,
	}

	Call_Info				record {
		call_id			counter,
		from_other_client	flag,
	}

end type

# Global rc
rc
	Train_Info			table	Train_Info_rec
end rc

rtdb
	Ticket_Amount_RTDB		table	record {
		Train_Number__DATE	string(13)	{key},
		Date			string(8),
		Available		counter,
		Reserved		counter,
	}

	User_Account_RTDB		table	record {
		User_ID			string(13)	{key},
		Passwd			string(16),
		Name			string(30),
		Phone			string(13),
		Balance			counter,
		Registration_TS		counter,
	#	Last_Login_TS		counter,
	}

	User_Order_RTDB			table	record {
		User_ID			string(16)	{key},
		Order_ID_0		long_counter,
		Order_ID_1		long_counter,
		Order_ID_2		long_counter,
		Order_ID_3		long_counter,
		Order_ID_4		long_counter,
		Order_ID_5		long_counter,
		Order_ID_6		long_counter,
		Order_ID_7		long_counter,
		Order_ID_8		long_counter,
		Order_ID_9		long_counter,
	}

	Order_RTDB			table	record {
		Order_ID		long_counter	{key},
		Creation_TS		counter,
		Payment_TS		counter,
		User_ID			string(16),
		Train_Number		string(4),
		Train_Date		string(8),
		State			Order_State_enum,
	}

	Session_RTDB			table	record {
		Session_ID		string(20)	{key},
		User_ID			string(16),
		Client_ID		counter,
		Start_TS		counter,
		Last_Active_TS		counter,
	}
	
end rtdb

dataview

	request			table	{owner}	record {
		text			string(200)	{key},
		result_code		Result_Code,
		message			string(200),
	}

	register		table	{owner}	record {
		text			string(13)	{key},
		result_code		Result_Code,
		message			string(30),
	}

	login			table	{owner}	record {
		text			string(13)	{key},
		result_code		Result_Code,
		message			string(30),
	}

	logout			table	{owner}	record {
		text			string(13)	{key},
		result_code		Result_Code,
		message			string(30),
	}

end dataview

########################################################################
########		   Server Definition			########
########################################################################
server
initialize
end initialize

fsm s_dummy
end fsm s_dummy
end server

########################################################################
########		   Client Definition			########
########################################################################
client
type
	Dataview_Info_rec			record {
		name			string,
		instance		counter,
		is_attached		flag,
	}

end type

rc
	# send om parameters
	GSL_Assert				message_class
	GSL_Report				message_class
	GSL_Assert_Priority			priority_of_action
	GSL_Report_Priority			priority_of_action
	GSL_Information_Priority		priority_of_action
	# end semd om parameters

end rc

dynamic

	a_z					string(26)
	A_Z					string(26)

	PASSWD_MINLEN				counter
	PASSWD_MAXLEN				counter
	PASSWD_CHARS				string
	NAME_MINLEN				counter
	NAME_MAXLEN				counter
	NAME_CHARS				string

	Glb_SPA_NAME				string
	Glb_Client_ID				counter

	# send om title
	Glb_IMOM_Report_Title			string
	Glb_RTDB_Data_Assert_Title		string
	Glb_EPAY_RC_Assert_Title		string
	Glb_Dynamic_Data_Assert_Title		string
	Glb_Overflow_Assert_Title		string
	Glb_Internal_Operation_Assert_Title	string
	Glb_RTDB_Operation_Assert_Title		string
	# end semd om title

	Glb_Request_Dataview_Info		Dataview_Info_rec
	Glb_Register_Dataview_Info		Dataview_Info_rec
	Glb_Login_Dataview_Info			Dataview_Info_rec
	Glb_Return_Val				reason_enum

	Glb_User_Account_RTDB			counter
	Glb_Session_RTDB			counter

	Glb_Register_Access			counter

	Glb_Test_Access				counter
	Glb_LDAP_Init_Time			counter
	Glb_LDAP_INIT_TIMESTAMP			counter

	######################################################
	# Inter-Fsm events
	######################################################
	Register				def_event {
		call_info		Call_Info,
		phone			string,
		name			string,
		passwd			string,
	}

	Account_Retrive					def_event {
		call_info		Call_Info,
		user_id			string,
		passwd			string,
	}

	Test					def_event {
		call_info		Call_Info,
		command			string,
		text			string,
	}

	Request_Result				def_event {
		result			Result_Code,
		message			string
	}

	######################################################
	# Initialization events
	######################################################
	Test_Init				def_event {}
	Dataview_Init				def_event {}
	RTDB_Init				def_event {}


end dynamic

def_function Parse (
	Delimiter				string,
	Input					string
)	Parse_Result_rec
dynamic
	Result					Parse_Result_rec
	Pos					counter
end dynamic
	set Pos = find(Delimiter, Input)
	if (Pos == 0)
	then # No Delimiter found in Input String
		set Result.head = Input
		reset Result.tail
	else
		set Result.head = substring(Input, 1, (Pos - 1))
		set Result.tail = substring(Input, (Pos + length(Delimiter)), (length(Input)))
	end if

	return (Result)
end def_function Parse

def_function Encrypt (
	Input					string
)	string
dynamic
	Data					string
end dynamic

	set Data = map(Input, PASSWD_CHARS,
		"!@#$%ZXCVBNM lkjhgfdsa0987yuiopTREWQ345612mnbvcxz*()DFGHASJKL^&qPwOeIrUtY")
	return (Data)
end def_function Encrypt

def_function Gen_Session_ID (
	Input					string
)	string

	return (Input:call_id())
end def_function Gen_Session_ID

initialize
	set a_z = "abcdefghijklmnopqrstuvwxyz"
	set A_Z = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	set PASSWD_MINLEN = 4
	set PASSWD_MAXLEN = 64
	set PASSWD_CHARS = a_z:A_Z:"0123456789 !@#$%^&*()"
	set NAME_MINLEN = 1
	set NAME_MAXLEN = 64
	set NAME_CHARS = a_z:A_Z:"0123456789_"

	set Glb_SPA_NAME = "TICKET"
		set Glb_RTDB_Data_Assert_Title =
						"REPT MANUAL ASSERT=103, SPA=" : Glb_SPA_NAME
	set Glb_EPAY_RC_Assert_Title =
						"REPT MANUAL ASSERT=104, SPA=" : Glb_SPA_NAME

		set Glb_Dynamic_Data_Assert_Title =
						"REPT INTERNAL ASSERT=302, SPA=" : Glb_SPA_NAME
		set Glb_Overflow_Assert_Title =
						"REPT INTERNAL ASSERT=303, SPA=" : Glb_SPA_NAME
		set Glb_Internal_Operation_Assert_Title =
						"REPT INTERNAL ASSERT=304, SPA=" : Glb_SPA_NAME
		set Glb_RTDB_Operation_Assert_Title =
						"REPT INTERNAL ASSERT=305, SPA=" : Glb_SPA_NAME
end initialize

###########################################################################
# FSM LDAP
###########################################################################
fsm LDAP
access
	Request_Dataview			routing_string_ssn
end access

call_dynamic
	BCI_instance				counter
	BCI_request_id				counter
	BCI_command				string
end call_dynamic

dynamic
	#------------------------------------------------------------------
	# FSM LDAP Event Definitions
	#------------------------------------------------------------------
	Command_Parsing				def_event {
		text			string,
	}

	End_Call				def_event {}

end dynamic

initialize
	set Glb_LDAP_INIT_TIMESTAMP = clock()
	schedule( clock = clock() + 3,
		to = customer_index(),
		event = Dataview_Init )
end initialize

event Dataview_Init
	if Request_Dataview.routing_string != ""
	then
		set Glb_Request_Dataview_Info.name = Request_Dataview.routing_string
		set Glb_Return_Val = request!attach_owner( Glb_Request_Dataview_Info.name )

		if Glb_Return_Val == e_a_okay
		then
			set Glb_Request_Dataview_Info.instance =
				request!get_instance ( Glb_Request_Dataview_Info.name )
		else	# attach_owner failed
			set Glb_Request_Dataview_Info.instance = 0
		end if

		if Glb_Request_Dataview_Info.instance == 0
		then
			schedule( clock = clock() + 3,
				event = Dataview_Init )
		else
			set Glb_Request_Dataview_Info.is_attached
			set Glb_LDAP_Init_Time = clock() - Glb_LDAP_INIT_TIMESTAMP
		end if
	end if

	end_call
end event Dataview_Init

#-------------------------------------------------------------------------------
# Dataview Request Handlers
#
# Description	: Dataview handler that accepts Input Messages (IM's), handles
#		  the request, and reports status with a corresponding Output
#		  Message (OM).
#-------------------------------------------------------------------------------
event request!read_received
	if Glb_Request_Dataview_Info.instance == 0
	then
		print( Glb_Request_Dataview_Info.name : ": dataview not running!\n")
		set Glb_Return_Val = request!send_read_failed(
			@.instance, @.request_id, e_application_error)
		next event End_Call
		return
	end if

	set BCI_instance = @.instance
	set BCI_request_id = @.request_id
	set BCI_command = @.text

	set Command_Parsing.text = @.text
	next event Command_Parsing
	return
end event request!read_received

event Command_Parsing
dynamic
	Parse_Result				Parse_Result_rec
	Head					string
	Remainder				string
	Option					string
	Value					string
end dynamic
	set Remainder = map( @.text, a_z:" ", A_Z )
	set Parse_Result = Parse( ":", @.text)
	set Head = Parse_Result.head
	set Remainder = Parse_Result.tail
	test Head
	case "REGISTER"
		# Get Options
		while Remainder != ""
		do
			set Parse_Result = Parse( ",", Remainder )
			set Head = Parse_Result.head
			set Remainder = Parse_Result.tail
			set Parse_Result = Parse( "=", Head )
			set Option = Parse_Result.head
			set Value = Parse_Result.tail
			test Option
			case "PHONE"
				set Register.phone = Value
			case "NAME"
				set Register.name = Value
			case "PASSWD"
				set Register.passwd = Value
			other	# Option not recognized
				set Request_Result.result = FAIL
				set Request_Result.message = Option :
					": option not recognized"
				next event Request_Result
				return
			end test
		end while
		set Register.call_info.call_id = call_index()
		set Register.call_info.from_other_client = false
		send( to = Glb_Register_Access,
			event = Register,
			ack = true )
		return
	case "LOGIN"
		# Get Options
		while Remainder != ""
		do
			set Parse_Result = Parse( ",", Remainder )
			set Head = Parse_Result.head
			set Remainder = Parse_Result.tail
			set Parse_Result = Parse( "=", Head )
			set Option = Parse_Result.head
			set Value = Parse_Result.tail
			test Option
			case "ID"
				set Account_Retrive.user_id = Value
			case "PASSWD"
				set Account_Retrive.passwd = Encrypt( Value )
			other	# Option not recognized
				set Request_Result.result = FAIL
				set Request_Result.message = Option :
					": option not recognized"
				next event Request_Result
				return
			end test
		end while
		next event Account_Retrive
		return
	case "TEST"
		set Test.command = Head
		# Get Options
		while Remainder != ""
		do
			set Parse_Result = Parse( ",", Remainder )
			set Head = Parse_Result.head
			set Remainder = Parse_Result.tail
			set Parse_Result = Parse( "=", Head )
			set Option = Parse_Result.head
			set Value = Parse_Result.tail
			test Option
			case "TEXT"
				set Test.text = Value
			other	# Option not recognized
				set Request_Result.result = FAIL
				set Request_Result.message = Option :
					": option not recognized"
				next event Request_Result
				return
			end test
		end while
		set Test.call_info.call_id = call_index()
		set Test.call_info.from_other_client = false
		send( to = Glb_Test_Access,
			event = Test,
			ack = true )
		return
	other
		set Request_Result.result = FAIL
		set Request_Result.message = Head : ": command not recognized"
		next event Request_Result
		return
	end test
			
end event Command_Parsing

event send_completed
end event send_completed

event send_failed
	set Request_Result.result = FAIL
	set Request_Result.message = "send request failed: " : string(@.failure_reason)
	next event Request_Result
	return
end event send_failed

event Request_Result
dynamic
	Request_Dataview_Rec			request_fields
	Request_Dataview_Present		request_present
end dynamic
	set Request_Dataview_Rec.result_code = @.result
	set Request_Dataview_Rec.message = @.message
	set Request_Dataview_Present.result_code
	set Request_Dataview_Present.message
	set Glb_Return_Val = request!send_read_completed (
		BCI_instance, BCI_request_id,
		Request_Dataview_Rec, Request_Dataview_Present)

	next event End_Call
	return
end event Request_Result

event End_Call
	print("LDAP end call")
	end_call
end event End_Call

end fsm LDAP

###########################################################################
# FSM IMOM
###########################################################################
fsm IMOM
access
	IMOM_Access_Key				routing_string
end access

call_dynamic
	BCI_transaction_id			counter
end call_dynamic

dynamic
	#------------------------------------------------------------------
	# FSM RECHARGE Event Definitions
	#------------------------------------------------------------------
	Command_Parsing				def_event {
		text			string,
	}

	End_Call				def_event {}
end dynamic

#-------------------------------------------------------------------------------
# Event		: usli_request
#
# Description	: USLI handler that accepts Input Messages (IM's), handles
#		  the request, and reports status with a corresponding Output
#		  Message (OM).
#-------------------------------------------------------------------------------
event usli_request
	set Command_Parsing.text = @.text
	next event Command_Parsing
	return
end event usli_request

event Command_Parsing
dynamic
	Parse_Result				Parse_Result_rec
	Head					string
	Remainder				string
	Option					string
	Value					string
end dynamic
	set Remainder = map( @.text, a_z:" ", A_Z )
	set Parse_Result = Parse( ":", @.text)
	set Head = Parse_Result.head
	set Remainder = Parse_Result.tail
	test Head
	case "TEST"
		set Test.command = Head
		# Get Options
		while Remainder != ""
		do
			set Parse_Result = Parse( ",", Remainder )
			set Head = Parse_Result.head
			set Remainder = Parse_Result.tail
			set Parse_Result = Parse( "=", Head )
			set Option = Parse_Result.head
			set Value = Parse_Result.tail
			test Option
			case "TEXT"
				set Test.text = Value
			other	# Option not recognized
				set Request_Result.result = FAIL
				set Request_Result.message = Option :
					": option not recognized"
				next event Request_Result
				return
			end test
		end while
		set Test.call_info.call_id = call_index()
		set Test.call_info.from_other_client = false
		send( to = Glb_Test_Access,
			event = Test,
			ack = true )
		return
	other
		set Request_Result.result = FAIL
		set Request_Result.message = Head : ": command not recognized"
		next event Request_Result
		return
	end test
			
end event Command_Parsing

event send_completed
end event send_completed

event send_failed
	set Request_Result.result = FAIL
	set Request_Result.message = "send request failed: " : string(@.failure_reason)
	next event Request_Result
	return
end event send_failed

event Request_Result
dynamic
	Request_Dataview_Rec			request_fields
	Request_Dataview_Present		request_present
end dynamic

	send_om( msg_class = GSL_Report, poa = GSL_Report_Priority,
		title = Glb_IMOM_Report_Title,
		message = @.message )
	next event End_Call
	return
end event Request_Result

event End_Call
	print("IMOM end call")
	end_call
end event End_Call

end fsm IMOM

###########################################################################
# FSM REGISTER
###########################################################################
fsm REGISTER
access
	Register_Access_Key			routing_string
end access

call_dynamic
	BCI_call_info				Call_Info
	BCI_Timestamp				counter
end call_dynamic

dynamic
	#------------------------------------------------------------------
	# FSM REGISTER Event Definitions
	#------------------------------------------------------------------
	Register_Result				def_event {
		result			Result_Code,
		message			string
	}

end dynamic

initialize
end initialize

event Register
dynamic
	Account					User_Account_RTDB_fields
end dynamic

	set BCI_call_info = @.call_info
	set BCI_Timestamp = clock()

	if length(@.phone) > 13 || map(@.phone, "0123456789", "") != ""
	then
		set Register_Result.result = FAIL
		set Register_Result.message = "phone number format error"
		next event Register_Result
		return
	end if

	if length(@.passwd) < PASSWD_MINLEN || length(@.passwd) > PASSWD_MAXLEN
		|| map(@.passwd, PASSWD_CHARS, "") != ""
	then
		set Register_Result.result = FAIL
		set Register_Result.message = "password format error - A password can contain 4~64 characters. Valid characters for a password are letters, digits, space and these 10 characters: !@#$%^&*()"
		next event Register_Result
		return
	end if

	if length(@.name) < NAME_MINLEN || length(@.name) > NAME_MAXLEN
		|| map(@.name, NAME_CHARS, "") != ""
	then
		set Register_Result.result = FAIL
		set Register_Result.message = "name format error - A name can contain 1~64 characters. Valid characters for a name are letters, digits and underscore"
		next event Register_Result
		return
	end if

	set Account.User_ID = @.phone
	set Account.Passwd = Encrypt( @.passwd )
	set Account.Name = @.name
	set Account.Phone = @.phone
	set Account.Registration_TS = BCI_Timestamp

	User_Account_RTDB!insert( instance = Glb_User_Account_RTDB,
		data = Account)
	
end event Register

event User_Account_RTDB!insert_completed
	set Register_Result.result = SUCCESS
	set Register_Result.message = "register successful"
	print("Registration - User_ID: ", @.User_ID, ", Time: ", clock!format("%T %D", BCI_Timestamp))
	next event Register_Result
	return
end event User_Account_RTDB!insert_completed

event User_Account_RTDB!insert_failed
	set Register_Result.result = FAIL
	if @.failure_reason == e_tuple_not_found
	then
		set Register_Result.message = "register failed - Login name already exists!"
	else
		set Register_Result.message = "register failed - system error"
	end if
	next event Register_Result
	return
end event User_Account_RTDB!insert_failed

event Register_Result
	set Request_Result.result = @.result
	set Request_Result.message = @.message
	send( to = BCI_call_info.call_id,
		event = Request_Result,
		ack = false )

	end_call
end event Register_Result

end fsm REGISTER

###########################################################################
# FSM LOGIN
###########################################################################
fsm LOGIN
access
	Login_Access_Key			routing_string
end access

call_dynamic
	BCI_call_info				Call_Info
	BCI_user_id				string
	BCI_passwd				string
	BCI_Session_ID				string
	BCI_Timestamp				counter
end call_dynamic

dynamic
	#--------------------------------------------------------------------------
	# FSM REGISTER Event Definitions
	#--------------------------------------------------------------------------
	Account_Verification					def_event {
		passwd			string,
	}

	Update_Session						def_event {
	}

	Login_Result				def_event {
		result			Result_Code,
		message			string
	}

end dynamic

initialize
end initialize

event Account_Retrive

	set BCI_call_info = @.call_info
	set BCI_user_id = @.user_id
	set BCI_passwd = @.passwd

	User_Account_RTDB!read( instance = Glb_User_Account_RTDB,
		User_ID = @.user_id)
	
end event Account_Retrive

event User_Account_RTDB!read_completed
	set Account_Verification.passwd = @.data.Passwd
	next event Account_Verification
	return
end event User_Account_RTDB!read_completed

event User_Account_RTDB!read_failed
	if @.failure_reason != e_tuple_not_found
	then 
		send_om( msg_class = GSL_Assert,
			title = Glb_RTDB_Operation_Assert_Title,
			poa = GSL_Assert_Priority,
			message = "User_Account_RTDB operation error"
				: string( @.failure_reason ))
		set Login_Result.result = FAIL
		set Login_Result.message = "system error"
		next event Login_Result
		return
	end if

	# user_id not found
	set Login_Result.result = FAIL
	set Login_Result.message = "invalid account"
	next event Login_Result
	return
end event User_Account_RTDB!read_failed

event Account_Verification
dynamic
	Session_Rec			Session_RTDB_fields
end dynamic
	if BCI_passwd != @.passwd
	then
		set Login_Result.result = FAIL
		set Login_Result.message = "wrong password"
		next event Login_Result
		return
	end if

	set BCI_Timestamp = clock()
	set BCI_Session_ID = Gen_Session_ID( BCI_user_id )

	# Create Session
	set Session_Rec.Session_ID = BCI_Session_ID
	set Session_Rec.User_ID = BCI_user_id
	set Session_Rec.Client_ID = Glb_Client_ID
	set Session_Rec.Start_TS = BCI_Timestamp
	set Session_Rec.Last_Active_TS = BCI_Timestamp

	Session_RTDB!insert( instance = Glb_Session_RTDB,
		data = Session_Rec )

end event Account_Verification

event Session_RTDB!insert_completed
	set Login_Result.result = SUCCESS
	set Login_Result.message = "login successful. Session ID: ":BCI_Session_ID
	next event Login_Result
	return
end event Session_RTDB!insert_completed

event Session_RTDB!insert_failed
	send_om( msg_class = GSL_Assert,
		title = Glb_RTDB_Operation_Assert_Title,
		poa = GSL_Assert_Priority,
		message = "Session_RTDB operation error"
			: string( @.failure_reason ))
	set Login_Result.result = FAIL
	set Login_Result.message = "system error"
	next event Login_Result
	return
end event Session_RTDB!insert_failed

event Login_Result
	if @.result == SUCCESS
	then
		print("LOGIN Successful - Time: ", clock!format("%T %D", BCI_Timestamp), ", User_ID: ", BCI_user_id, ", Session ID: ", BCI_Session_ID)
	else
		print("LOGIN Failed - Time: ", clock!format("%T %D", BCI_Timestamp), ", User_ID: ", BCI_user_id, ", Reason: ", @.message)
	end if
	set Request_Result.result = @.result
	set Request_Result.message = "login failed - " : @.message
	send( to = BCI_call_info.call_id,
		event = Request_Result,
		ack = false )

	end_call
end event Login_Result

end fsm LOGIN

###########################################################################
# FSM TEST
###########################################################################
fsm TEST
access
	Test_Access_Key				routing_string
end access

call_dynamic
	BCI_call_info				Call_Info
end call_dynamic

dynamic
	#------------------------------------------------------------------
	# FSM TEST Event Definitions
	#------------------------------------------------------------------
	Test_Result				def_event {
		result			Result_Code,
		message			string
	}

	End_Call				def_event {}

end dynamic

initialize
	schedule( clock = clock() + 3,
		to = customer_index(),
		event = Test_Init )
end initialize

event Test_Init
	set Glb_Test_Access = routing_string!lookup( Test_Access_Key )
	if Glb_Test_Access == 0
	then
		schedule( clock = clock() + 3, event = Test_Init )
	end if
	end_call
end event Test_Init

event Test
	print("Test Recieved!")
	print("Command: ", @.command)
	print("Text   : ", @.text)
	set BCI_call_info = @.call_info

	set Test_Result.result = SUCCESS
	set Test_Result.message = "test succeeded!"
	next event Test_Result
	return
end event Test

event Test_Result
	set Request_Result.result = @.result
	set Request_Result.message = @.message
	send( to = BCI_call_info.call_id,
		event = Request_Result,
		ack = false )
	next event End_Call
	return
end event Test_Result

event End_Call
	print("TEST end call")
	end_call
end event End_Call
end fsm TEST

###########################################################################
# FSM SERVICE
###########################################################################
fsm SERVICE
access
	SERVICE_Access_Key			routing_string
end access

dynamic
	Request_Handler				def_event {
	}

	End_Call				def_event {}
end dynamic

initialize
	#set Glb_Client_ID = CC_Enum_To_Client_Host( which_client_cc_am_i() )
	schedule(event = RTDB_Init, clock = clock() + 3)
end initialize

event RTDB_Init
	set Glb_Return_Val = User_Account_RTDB!attach ( "User_Account_RTDB" )
	if Glb_Return_Val == e_out_of_memory
	then
		set Glb_Return_Val = User_Account_RTDB!attach_no_cache("User_Account_RTDB" )
		if Glb_Return_Val != e_a_okay
		then
			#handle attach_no_cache error and
			print ("User_Account_RTDB attach_no_cache failure")
		end if
	elif Glb_Return_Val != e_a_okay
	then
		#handle non memory error and
		print ("User_Account_RTDB attach non memory error")
	end if
	set Glb_User_Account_RTDB = User_Account_RTDB!get_instance( "User_Account_RTDB" )

	set Glb_Return_Val = Session_RTDB!attach ( "Session_RTDB" )
	if Glb_Return_Val == e_out_of_memory
	then
		set Glb_Return_Val = Session_RTDB!attach_no_cache("Session_RTDB" )
		if Glb_Return_Val != e_a_okay
		then
			#handle attach_no_cache error and
			print ("Session_RTDB attach_no_cache failure")
		end if
	elif Glb_Return_Val != e_a_okay
	then
		#handle non memory error and
		print ("Session_RTDB attach non memory error")
	end if
	set Glb_Session_RTDB = Session_RTDB!get_instance( "Session_RTDB" )

	next event End_Call
end event RTDB_Init
	
event Request_Handler
end event Request_Handler

event End_Call
	end_call
end event End_Call

end fsm SERVICE

end client
